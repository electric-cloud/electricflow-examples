{
  "schema explanation" : "Each object in the model is explained with this field.  You may want to copy this file to your implementation and modify fields as needed to match your use case.  (Examples in parentheses)",
  "schema explanation2" : "NOTE: You are expected to abide by JSON standards for things like maps and arrays",
  "schema explanation3" : "NOTE: See the corresponding services.groovy file for how we use certain defaults.  For example, we assume we're defined within the same project or reference our Parents.",
  "project" : {
    "name" : "The name of your EF Project",
    "description" : "Required field to describe this project",
    "procedures" : [
      {
        "schema explanation" : "Define each procedure here, and include the information necessary for its type [command, plugin, etc.]",
        "name" : "Name of the procedure as we will reference it elsewhere (stub)",
        "description" : "Required field to describe the procedure.",
        "command" : "The command to run for procedures of type [command] (echo \"hello world\""
      }
    ],
    "workflows" : [
      {
        "schema explanation" : "Define your EF Workflow object in this section.",
        "name" : "Name for the Workflow Defintion Object",
        "description" : "Required description for this object",
        "stateDefinitions" : [
          {
            "schema explanation" : "Each state is defined in terms of its fields.",
            "name" : "Name of the state",
            "subprocedure" : "entry point for the state, if it is a procedure"
          }
        ],
        "transitionDefinitions" : [
          {
            "schema explanation" : "Each state transition is defined in terms of its details below.",
            "name": "The name of the transition",
            "condition" : "What is the condition for us to do this transition? [$[/javascript mySubjob.outcome == \"success\";]), etc. ]",
            "stateDefinitionName" : "The name of the starting State",
            "targetState" : "The name of the Destination State",
            "trigger" : "What type of transiton is this? [onCompletion, manual, TBD others]"
          }
        ]
      }
    ],
    "applications" : [
      {
        "schema explanation" : "Each application is defined in terms of its underlying objects.  See applications.groovy for how fields are used",
        "name" : "Name of the application object and referenced in Environments, Pipelines, Releases, and other places.",
        "description" : "Required explanation of this object",
        "applicationTiers" : [
          {
            "name" : "Name of an application tier that contains one or more components (web tier)",
            "components" : [
              {
                "schema explanation" : "A tier contains one or more components typically sourced from an artifact",
                "name" : "Name of the component, which maps to an artifact and is usually a file (war, ear, msi, etc.)",
                "description" : "Required explanation of the object",
                "groupId" : "Recommended format is maven-compatible (com.ec.sample)",
                "artifactId" : "The name of the artifact, typically maven-compatible names (web1)",
                "processes" : [
                  {
                    "schema explanation" : "Define the Component Procedure here, and include the information necessary for its type [command, plugin, etc.]",
                    "name" : "Name of the process (deploy, undeploy, etc)",
                    "description" : "This component process specifies the web1 component deploy operation.",
                    "processType" : "DEPLOY",
                    "processSteps" : [
                      {
                        "schema explanation" : "This is the built-in component process to pull an artifact from the EF repository server (not sure how this looks for a maven repo)",
                        "name" : "Name of the component process",
                        "description" : "Required description",
                        "processStepType" : "Component Process type [component]",
                        "schema explanation2" : "NOTE: This next actualParameters section contains information specific to using the EF Artifact Repository.  See below ",
                        "schema explanation3" : "See below the reference to YOURCOMPONENT for where the name of your component needs to be in the versionRange actualParameter",
                        "actualParameters": [
                          {"name" : "artifactName", "value" : "$[/myComponent/ec_content_details/artifactName]"},
                          {"name" : "artifactVersionLocationProperty", "value" : "$[/myComponent/ec_content_details/artifactVersionLocationProperty]"},
                          {"name" : "filterList", "value" : "$[/myComponent/ec_content_details/filterList]"},
                          {"name" : "overwrite", "value" : "$[/myComponent/ec_content_details/overwrite]"},
                          {"name" : "retrieveToDirectory", "value" : "$[/myComponent/ec_content_details/retrieveToDirectory]"},
                          {"name" : "versionRange", "value" : "$[/myJob/ec_YOURCOMPONENT-version]"}
                        ],
                        "subprocedure" : "Retrieve",
                        "subproject" : "/plugins/EC-Artifact/project"
                      },
                      {
                        "schema explanation" : "This is a component step definition for a procedure call",
                        "name" : "deployit",
                        "description" : "Required",
                        "processStepType" : "procedure",
                        "subprocedure" : "name of your procedure",
                        "subproject" : "the project where your procedure is defined"
                      }
                    ],
                    "processDependencies" : [
                      {
                        "schema explanation" : "Dependencies specify the order in which we organize our Component Process Steps.",
                        "source" : "The name of the first Component Process Step",
                        "target" : "The name of the destination Component Process Step",
                        "branchtype" : "ALWAYS | ERROR | SUCCESS | (maybe something else)",
                        "schema explanation-branch condition" : "If you specify a custom branch type CUSTOM, then you probably define a branchCondition",
                        "branchCondition" : "$[parameter reference] or $[/javascript JAVASCRIPT CODE]",
                        "branchConditionName" : "The name of the branch condition",
                        "branchConditionType" : "CUSTOM - to specify you "
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "processes" : [
          {
            "name" : "Name of the Application Process",
            "description" : "Required description",
            "processType" : "DEPLOY | OTHER",
            "formalParameters": [
              {
                "schema explanation" : "Each parameter for your Application Process is defined here",
                "name" : "name of parameter",
                "type" : "checkbox | (TBD) others...",
                "description" : "Required",
                "defaultValue" : "true",
                "orderIndex" : "The order as presented to the user (1)",
                "label" : "Friendly text to guide the user - (help text)",
                "expansionDeferred" : "0",

                "schema explanation-checkbox" : "These values are for checkboxes",
                "checkedValue" : "true",
                "initiallyChecked" : "true",
                "uncheckedValue" : "false"
              }
            ],
            "processSteps" : [
              {
                "schema explanation" : "Each Application Process Step is defined in terms shown below",
                "name" : "Name of the Application Process Step",
                "description" : "Required",
                "applicationTierName" : "Name of the application tier where we run this step",
                "processStepType" : "process | manual | command | rollback",
                "subcomponent" : "The name of the component we're using",
                "subcomponentProcess" : "the name of the component process",

                "schema explanation-process step type details" : "see applications.groovy for type-specific details, including:",
                "assignee" : "list of assignees (comma-separated array)",
                "instruction" : "Instructions for a manual step",
                "notificationTemplate" : "Thame of our notification template (ec_default_manual_retry_process_step_notification_template)",
                "rollbackType" : "environment | TBD",
                "smartRollback" : "0 | 1 | false | true",
                "subprocedure" : "Name of the subprocedure (RunCommand)",
                "subproject" : "Name of the subproject, possibly a different project than our parent (/plugins/EC-Core/project)",
                "commandToRun" : "The shell command to run"
              }
            ],
            "processDependencies" : [
              {
                "schema explanation" : "Dependencies specify the order in which we organize our Application Process Steps.",
                "source" : "The name of the first Component Process Step",
                "target" : "The name of the destination Component Process Step",
                "branchtype" : "ALWAYS | ERROR | SUCCESS | (maybe something else)",
                "schema explanation-branch condition" : "If you specify a custom branch type CUSTOM, then you probably define a branchCondition",
                "branchCondition" : "$[parameter reference] or $[/javascript JAVASCRIPT CODE]",
                "branchConditionName" : "The name of the branch condition",
                "branchConditionType" : "CUSTOM - to specify you "
              }
            ]
          }
        ],
        "tierMaps" : [
          {
            "schema explanation" : "TierMaps connect an Application(Tiers) to an Environment(Tiers)",
            "applicationName" : "The name of the Application",
            "environmentName" : "The name of the Enviroment",
            "tierMappings" : [
              {
                "applicationTierName" : "Application Tier mapped to the...",
                "environmentTierName" : "...Environment Tier"
              }
            ]
          }
        ]
      }
    ],
    "services": [
      {
        "schema explanation" : "list of EF Services",
        "name": "EF Name as it appears in the Services list and is used by our processes, maps, and other objects (myservice)",
        "description": "Required description of this service",
        "containers": [
          {
            "schema explanation" : "List of containers within the service.  Each of the fields below define the container",
            "name": "EF object name - we refer to this container name in ports, mappings, environments, etc. (mycontainer)",
            "description": "Required description of the container",
            "command": "what command do we run for this container? (-f)",
            "cpuCount": "CPU count request (0.2)",
            "cpuLimit": "The maximum CPU count permitted by this container (2.5)",
            "credentialName": "specify the name of the EF credential you use for this container (mycredname)",
            "entryPoint": "what is the entry point for this container? (crond)",
            "imageName": "This is the name of your container artifact (weaveworksdemos/carts)",
            "imageVersion": "The artifact version of your container (0.3.12)",
            "memoryLimit": "Maximum memory allowed, in MB (1024)",
            "memorySize": "Initial memory allication, in MB (512)",
            "registryUri": "TBD: I haven't used this one yet.",
            "serviceName": "The owning Service, in Services->Name.  TBD: In our script, this may be a redundant field no longer needed.",
            "environmentVariables": [
              {
                "schema explanation" : "Enter each environment variable and its definition.",
                "name": "The name of the ENVAR, typically in ALL CAPS (SESSION_REDIS)",
                "type": "string (TBD: Figure out if there are other values)",
                "value": "The value of the environment variable, typically text (true)"
              }
            ],
            "ports": [
              {
                "schema explanation" : "Define each port in terms of its name and port.",
                "name": "Name of the port for this specific container, which is used as a reference elsewhere. (uiport)",
                "containerPort": "The numeric port number (8079)"
              }
            ],
            "volumeMounts" : [
              {
                "name" : "Name of the volume mount (scratch-space)",
                "mountPath" : "Mount location for the volume in the container (/tmp/cache)"
              }
            ]
          }
        ],
        "processes": [
          {
            "schema explanation" : "Define each process for the service.",
            "name": "The name of process for this service (Deploy, Undeploy)",
            "description": "Required description of the process.",
            "processType": "The type of process (DEPLOY, UNDEPLOY, OTHER)",
            "processSteps": [
              {
                "schema explanation" : "Each step has to be defined in terms of its type-specific details. For example, a container operation needs to specify a container name",
                "name": "Name of the individual step in the process (Acquire artifact)",
                "processStepType": "Type of process step (service, procedure, TBD Others)",
                "description": "Required description of the step",
                "subservice": "[Service] - name of the service we're using (our parent service name)",
                "container": "[Service] - name of the container we're using (frontend)"
              }
            ]
          }
        ],
        "ports": [
          {
            "schema explanation" : "Define the service-level port, which references a subcontainer.",
            "name": "Name of this port, which may be referenced in our mapping (serviceuiport)",
            "listenerPort": "The port to which we're listening - where communication comes from a container (80)",
            "subcontainer": "Since our service may contain multiple containers, we need to specify the specific container (frontend)",
            "subport": "The name of the subport (uiport)"
          }
        ],
        "environmentMaps": [
          {
            "schema explanation" : "Each map from our service process to an environment needs to have a corresponding map.  These values are where we specify details that are specific for the environment.",
            "serviceName" : "The name of the service (Front End Service)",
            "environmentName" : "The name of the environment (ww-cluster-dev)",
            "clusterName" : "The cluster within the environment for the named service (openshiftcluster)",
            "serviceClusterMapping" : {
              "schema explanation" : "The mapping defines values that are specific for this mapping.  Include as many as are needed, and are specific to the mapping itself",
              "actualParameters" : [
                { "schema explanation" : "The mapping defines values that are specific for this mapping.  Include as many as are needed, and are specific to the mapping itself",
                  "name" : "The name of the mapping parameter (serviceType)", "text" : "The value for the mapping (NodePort)" }
              ],
              "serviceMapDetail" : [
                {"schema explanation" : "The mapping defines values that are specific for this mapping.  Include as many as are needed, and are specific to the mapping itself",
                  "name" : "The name of the detail for this particular mapping (cpuLimit)", "text" : "The value in this mapping (2)"}
              ],
              "ports": [
                {
                  "schema explanation" : "The mapping defines values that are specific for this mapping.  Include as many as are needed, and are specific to the mapping itself",
                  "name": "Name of this environmentMap port mapping. I haven't yet found where this name needs to be referenced.",
                  "listenerPort": "The port on which we listen to and we'll map over the port named below.",
                  "subcontainer": "What container owns the port?",
                  "subport": "What is the name of that port?"
                }
              ]
            }
          }
        ]
      }
    ],
    "environments" : [
      {
        "schema explanation" : "Applications require the definition of an environment, and refer to them by name",
        "name" : "The name of this environment (dev/qa/prod)",
        "description" : "Required explanation of the environment",
        "environmentTiers" : [
          {
            "schema explanation" : "Each environment has one or more EnvironmentTiers",
            "name":  "The name of the tier (front end)",
            "resources" : [
              "Each resource or resource pool for this environment"
            ]
          }
        ],
        "clusters" : [
          {
            "schema explanation" : "An environment may also contain a cluster definition for services in hybrid applications",
            "name" : "Name of the cluster (openshiftcluster)",
            "pluginKey" : "A cluster definition requires a pluginKey for that type of cluster.  Name it here by key name (EC-OpenShift)",
            "provisionParameter" : {
              "schema explanation" : "Each Cluster type has different configuration values.  The values below are to be filled-in for the specific cluster type.",
              "config": "Example of an OpenShift value (complex-demo)",
              "project": "Example of an OpenShift value (complex-demo-dev)"
            }
          }
        ]
      }
    ],
    "pipelines" : [
      {
        "schema explanation" : "EF Pipelines tie many automations all together",
        "name": "The name of your pipeline",
        "description" : "Required description",

        "formalParameters": [
          {
            "schema explanation" : "Each formal parameter for the pipeline is defined in this array and referenced in the pipeline as $[name of parameter]",
            "name" : "name of formal parameter",
            "type" : "checkbox | TBD others",
            "description" : "Required description of the parameter",
            "defaultValue" : "true",
            "orderIndex" : "1",
            "label" : "The help text",
            "expansionDeferred" : "0",
            "checkedValue" : "true",
            "initiallyChecked" : "true",
            "uncheckedValue" : "false"
          }
        ],

        "stages": [
          {
            "schema explanation" : "Each stage is defined in terms of its tasks and gates",
            "name": "Name of the stage (Dev/QA/UAT/Stage/PreProd/Prod/etc.)",
            "description" : "Required description of the stage",
            "gates" : [
              {
                "schema explanation" : "Entry- or exit-gates for the stage",
                "gateType" : "PRE | POST",
                "task" :
                {
                  "name" : "The onscreen name of the gate",
                  "description" : "Required instructions for the gate",
                  "taskType" : "APPROVAL | TBD Others?",
                  "approver" : "Array of names",
                  "condition" : "Specify the condition when the gate 'runs' or is enabled ($[enableGates])"
                }
              }
            ],
            "tasks": [
              {
                "schema explanation" : "Each task is an entry point to an existing automation, a group, or a command-line invocation.  See pipelines.groovy for details on the required fields",
                "name": "Onscreen name of the Task",
                "description" : "Group the software into one",
                "taskType" : "GROUP | PROCESS | PROCEDURE | COMMAND | WORKFLOW | PLUGIN | MANUAL | UTILITY",
                "projectName" : "Name of our project",

                "condition" : "Specify the run condition ($[enableStep])",
                "groupName" : "If this task belongs to group, specify the group name here",
                "environmentName" : "Specify the environment if applicable to the task type PROCESS",
                "environmentProjectName": "Specify the project for the environment for type PRODCESS",
                "subapplication" : "Specify the application name for type PROCESS",
                "subprocess" : "Specify the application process for type PROCESS",
                "subproject" : "Specify the application process project for type PROCESS",
                "taskProcessType" : "Specify the applicaiton process type PROCESS",

                "commandToRun" : "Command-line invocation for type COMMAND",

                "subworkflowDefinition" : "Name of the workflow definition for type WORKFLOW",
                "subworkflowStartingState" : "Starting State of your workflow",

                "subpluginKey": "The pluginkey for type PLUGIN/UTILITY (EC-FileOps)",
                "subprocedure": "The entry point of your PROCEDURE/PLLUGIN/UTILITY (CreateEmptyFile)",

                "instruction" : "Instructions for type MANUAL",
                "notificationTemplate" : "The name of the notification template (ec_default_pipeline_manual_task_notification_template)",
                "approver" : [ "admin", "marco" ],

                "schema explanation-actualParameters" : "Specify the actual parameters for your process.  PROCESS-APPLICATION require these specific examples",
                "actualParameters" : [
                  { "name": "ec_enforceDependencies", "value" : "0" },
                  { "name": "ec_smartDeployOption", "value" : "0" },
                  { "name": "ec_stageArtifacts", "value" : "0" }
                ]

              }
            ]
          }
        ]
      }
    ]

  }
}