{
  "emailConfigs" : [
    { "name" : "gmail",
      "description" : "gmail account access in EF",
      "mailFrom" : "mr.marco.a.morales@gmail.com",
      "mailHost" : "smtp.gmail.com",
      "mailPort" : "465",
      "mailProtocol" : "SMTPS",
      "mailUser" : "mr.marco.a.morales@gmail.com"
    },
    { "name" : "test",
      "description" : "gmail account access in EF",
      "mailFrom" : "mr.marco.a.morales@gmail.com",
      "mailHost" : "smtp.gmail.com",
      "mailPort" : "465",
      "mailProtocol" : "SMTPS",
      "mailUser" : "mr.marco.a.morales@gmail.com"
    }
  ],

  "credentials" : [
    { "name" : "Artifactory",
      "project" : "@@PROJECTNAMETOKEN@@",
      "UserName" : "myusername",
      "passwordFile" : "password-artifactory.txt"
    },
    { "name" : "Jenkins",
      "project" : "@@PROJECTNAMETOKEN@@",
      "UserName" : "myusername",
      "passwordFile" : "password-jenkins.txt"
    }
  ],

  "users" : [
    { "name" : "marco",
      "fullUserName" : "Marco Morales",
      "email" : "mmorales@electric-cloud.com"
    },
    { "name" : "seymour",
      "fullUserName" : "Seymour Butz",
      "email" : "sbutz@electric-cloud.com"
    }
  ],

  "project" : {
    "name" : "@@PROJECTNAMETOKEN@@",
    "description" : "Example of a pipeline with entry points of each type",

    "procedures" : [
      {"name" : "Stub",
        "description" : "Placeholder that shows a really fast SUCCESS"}
    ],

    "environments" : [
      {
        "name" : "dev",
        "description" : "DEV Environment",
        "environmentTiers" : [
          {
            "name":  "AppTier",
            "resources" : [
              "@@PROJECTNAMETOKEN@@-dev"
            ]
          },
          {
            "name" : "DBTier",
            "resources" : [
              "@@PROJECTNAMETOKEN@@-dev"
            ]
          }
        ]
      },
      {
        "name" : "qa",
        "description" : "QA Environment",
        "environmentTiers" : [
          {
            "name":  "AppTier",
            "resources" : [
              "@@PROJECTNAMETOKEN@@-qa"
            ]
          },
          {
            "name" : "DBTier",
            "resources" : [
              "@@PROJECTNAMETOKEN@@-qa"
            ]
          }
        ]
      },
      {
        "name" : "prod",
        "description" : "PROD Environment",
        "environmentTiers" : [
          {
            "name":  "AppTier",
            "resources" : [
              "@@PROJECTNAMETOKEN@@-prod"
            ]
          },
          {
            "name" : "DBTier",
            "resources" : [
              "@@PROJECTNAMETOKEN@@-prod"
            ]
          }
        ]
      },
      {
        "name" : "cluster-dev",
        "clusters" : [
          {
            "name" : "openshiftcluster",
            "pluginKey" : "EC-OpenShift",
            "provisionParameter" : {
              "config": "complex-demo",
              "project": "complex-demo-dev"
            }
          }
        ]
      },
      {
        "name" : "cluster-qa",
        "clusters" : [
          {
            "name" : "openshiftcluster",
            "pluginKey" : "EC-OpenShift",
            "provisionParameter" : {
              "config": "complex-demo",
              "project": "complex-demo-qa"
            }
          }
        ]
      },
      {
        "name" : "cluster-prod",
        "clusters" : [
          {
            "name" : "openshiftcluster",
            "pluginKey" : "EC-OpenShift",
            "provisionParameter" : {
              "config": "complex-demo",
              "project": "complex-demo-prod"
            }
          }
        ]
      },
      {
        "name" : "ww-cluster-dev",
        "clusters" : [
          {
            "name" : "openshiftcluster",
            "pluginKey" : "EC-OpenShift",
            "provisionParameter" : {
              "config": "complex-demo",
              "project": "ww-demo-dev"
            }
          }
        ]
      },
      {
        "name" : "ww-cluster-qa",
        "clusters" : [
          {
            "name" : "openshiftcluster",
            "pluginKey" : "EC-OpenShift",
            "provisionParameter" : {
              "config": "complex-demo",
              "project": "ww-demo-qa"
            }
          }
        ]
      },
      {
        "name" : "ww-cluster-prod",
        "clusters" : [
          {
            "name" : "openshiftcluster",
            "pluginKey" : "EC-OpenShift",
            "provisionParameter" : {
              "config": "complex-demo",
              "project": "ww-demo-prod"
            }
          }
        ]
      }
    ],

    "workflows" : [
      { "name" : "Prototypical Workflow",
        "description" : "Typical simple workflow to illustrate a point",
        "stateDefinitions" : [
          { "name" : "Starting State",
            "subprocedure" : "Stub"},
          { "name" : "Checkout",
            "subprocedure" : "Stub"},
          { "name" : "Build",
            "subprocedure" : "Stub"},
          { "name" : "Test",
            "subprocedure" : "Stub"},
          { "name" : "Success",
            "subprocedure" : "Stub"},
          { "name" : "Fail - Remediate",
            "subprocedure" : "Stub"},
          { "name" : "Quit",
            "subprocedure" : "Stub"}
        ],
        "transitionDefinitions" : [
          { "name": "T1",
            "condition" : "",
            "stateDefinitionName" : "Starting State",
            "targetState" : "Checkout",
            "trigger" : "onCompletion"
          },
          { "name" : "T2",
            "condition" : "$[/javascript mySubjob.outcome == \"success\";]",
            "stateDefinitionName" : "Checkout",
            "targetState" : "Build",
            "trigger" : "onCompletion"
          },
          { "name": "T2",
            "condition" : "",
            "stateDefinitionName" : "Build",
            "targetState" : "Test",
            "trigger" : "onCompletion"
          },
          { "name" : "F1",
            "condition" : "$[/javascript mySubjob.outcome != \"success\";]",
            "stateDefinitionName" : "Test",
            "targetState" : "Fail - Remediate",
            "trigger" : "onCompletion"
          },
          { "name" : "T3",
            "condition" : "$[/javascript mySubjob.outcome == \"success\";]",
            "stateDefinitionName" : "Test",
            "targetState" : "Success",
            "trigger" : "onCompletion"
          },
          { "name" : "Restart",
            "condition" : "",
            "stateDefinitionName" : "Fail - Remediate",
            "targetState" : "Checkout",
            "trigger" : "manual"
          },
          { "name" : "F2",
            "condition" : "",
            "stateDefinitionName" : "Fail - Remediate",
            "targetState" : "Quit",
            "trigger" : "manual"
          }
        ]
      }
    ],

    "applications" : [
      {
        "name" : "Two-Tier",
        "description" : "My application description",
        "applicationTiers" : [
          {
            "name" : "User Interface",
            "components" : [
              {
                "name" : "web1",
                "description" : "One of the web components",
				"groupId" : "com.ec.samples",
				"artifactId" : "web1",
				"processes" : [
                  {
                    "name" : "deploy",
                    "description" : "This component process specifies the web1 component deploy operation.",
                    "processType" : "DEPLOY",
                    "processSteps" : [
                      { "name" : "acquire artifact",
                        "description" : "Pull the artifact from our repository",
                        "processStepType" : "component",
                        "actualParameters": [
                          {"name" : "artifactName", "value" : "$[/myComponent/ec_content_details/artifactName]"},
                          {"name" : "artifactVersionLocationProperty", "value" : "$[/myComponent/ec_content_details/artifactVersionLocationProperty]"},
                          {"name" : "filterList", "value" : "$[/myComponent/ec_content_details/filterList]"},
                          {"name" : "overwrite", "value" : "$[/myComponent/ec_content_details/overwrite]"},
                          {"name" : "retrieveToDirectory", "value" : "$[/myComponent/ec_content_details/retrieveToDirectory]"},
                          {"name" : "versionRange", "value" : "$[/myJob/ec_web1-version]"}
                        ],
                        "subprocedure" : "Retrieve",
                        "subproject" : "/plugins/EC-Artifact/project"
                      },
                      { "name" : "deployit",
                        "description" : "deploy the software",
                        "processStepType" : "procedure",
                        "subprocedure" : "Stub",
                        "subproject" : "@@PROJECTNAMETOKEN@@"
                      }
                    ],
                    "processDependencies" : [
                      { "source" : "acquire artifact",
                        "target" : "deployit",
                        "branchtype" : "ALWAYS"
                      }
                    ]
                  },
                  {
                    "name" : "undeploy",
                    "description" : "This component process specifies the web1 component undeploy operation.",
                    "processType" : "UNDEPLOY",
                    "processStepType" : "procedure",
                    "processSteps" : [
                      { "name" : "removeit",
                        "description" : "deploy the software",
                        "processStepType" : "procedure",
                        "subprocedure" : "Stub",
                        "subproject" : "@@PROJECTNAMETOKEN@@"
                      }
                    ]
                  }
				]
              },
              {
                "name" : "web2",
				"groupId" : "com.ec.samples",
				"artifactId" : "web2",
				"processes" : [
                  {
                    "name" : "deploy",
                    "description" : "This component process specifies the web2 component deploy operation.",
                    "processType" : "DEPLOY",
                    "processSteps" : [
                      { "name" : "acquire artifact",
                        "description" : "Pull the artifact from our repository",
                        "processStepType" : "component",
                        "actualParameters": [
                          {"name" : "artifactName", "value" : "$[/myComponent/ec_content_details/artifactName]"},
                          {"name" : "artifactVersionLocationProperty", "value" : "$[/myComponent/ec_content_details/artifactVersionLocationProperty]"},
                          {"name" : "filterList", "value" : "$[/myComponent/ec_content_details/filterList]"},
                          {"name" : "overwrite", "value" : "$[/myComponent/ec_content_details/overwrite]"},
                          {"name" : "retrieveToDirectory", "value" : "$[/myComponent/ec_content_details/retrieveToDirectory]"},
                          {"name" : "versionRange", "value" : "$[/myJob/ec_web2-version]"}
                        ],
                        "subprocedure" : "Retrieve",
                        "subproject" : "/plugins/EC-Artifact/project"
                      },
                      { "name" : "deployit",
                        "description" : "deploy the software",
                        "processStepType" : "procedure",
                        "subprocedure" : "Stub",
                        "subproject" : "@@PROJECTNAMETOKEN@@"
                      }
                    ],
                    "processDependencies" : [
                      { "source" : "acquire artifact",
                        "target" : "deployit",
                        "branchtype" : "always"
                      }
                    ]
                  },
                  {
                    "name" : "undeploy",
                    "description" : "This component process specifies the web2 component undeploy operation.",
                    "processType" : "UNDEPLOY",
                    "processSteps" : [
                      { "name" : "removeit",
                        "description" : "deploy the software",
                        "processStepType" : "procedure",
                        "subprocedure" : "Stub",
                        "subproject" : "@@PROJECTNAMETOKEN@@"
                      }
                    ]
                  }
				]
              }
            ]
          },
          {
            "name" : "Database",
            "components" : [
              {
                "name" : "db",
				"groupId" : "com.ec.samples",
				"artifactId" : "db",
                "processes" : [
                  {
                    "name" : "deploy",
                    "description" : "This component process specifies the web2 component deploy operation.",
                    "processType" : "DEPLOY",
                    "processSteps" : [
                      { "name" : "acquire artifact",
                        "description" : "Pull the artifact from our repository",
                        "processStepType" : "component",
                        "actualParameters": [
                          {"name" : "artifactName", "value" : "$[/myComponent/ec_content_details/artifactName]"},
                          {"name" : "artifactVersionLocationProperty", "value" : "$[/myComponent/ec_content_details/artifactVersionLocationProperty]"},
                          {"name" : "filterList", "value" : "$[/myComponent/ec_content_details/filterList]"},
                          {"name" : "overwrite", "value" : "$[/myComponent/ec_content_details/overwrite]"},
                          {"name" : "retrieveToDirectory", "value" : "$[/myComponent/ec_content_details/retrieveToDirectory]"},
                          {"name" : "versionRange", "value" : "$[/myJob/ec_db-version]"}
                        ],
                        "subprocedure" : "Retrieve",
                        "subproject" : "/plugins/EC-Artifact/project"
                      },
                      { "name" : "deployit",
                        "description" : "deploy the software",
                        "processStepType" : "procedure",
                        "subprocedure" : "Stub",
                        "subproject" : "@@PROJECTNAMETOKEN@@"
                      }
                    ],
                    "processDependencies" : [
                      { "source" : "acquire artifact",
                        "target" : "deployit",
                        "branchtype" : "always"
                      }
                    ]
                  },
                  {
                    "name" : "undeploy",
                    "description" : "This component process specifies the web2 component undeploy operation.",
                    "processType" : "UNDEPLOY",
                    "processSteps" : [
                      { "name" : "removeit",
                        "description" : "deploy the software",
                        "processStepType" : "procedure",
                        "subprocedure" : "Stub",
                        "subproject" : "@@PROJECTNAMETOKEN@@"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "processes" : [
          {
            "name" : "Deploy Application",
            "description" : "An application-level process that deploys multiple components",
            "processType" : "DEPLOY",
            "formalParameters": [
              {
                "name" : "doManualCheck",
                "type" : "checkbox",
                "description" : "Enable if we should manually check the deployment",
                "defaultValue" : "true",
                "orderIndex" : "1",
                "label" : "Do Manual Check?",
                "expansionDeferred" : "0",
                "checkedValue" : "true",
                "initiallyChecked" : "true",
                "uncheckedValue" : "false"
              }
            ],
            "processSteps" : [
              {
                "name" : "deploy web1",
                "description" : "Execute the web1 Component process",
                "applicationTierName" : "User Interface",
                "processStepType" : "process",
                "subcomponent" : "web1",
                "subcomponentProcess" : "deploy"
              },
              {
                "name" : "deploy web2",
                "description" : "Execute the web1 Component process",
                "applicationTierName" : "User Interface",
                "processStepType" : "process",
                "subcomponent" : "web2",
                "subcomponentProcess" : "deploy"
              },
              {
                "name" : "deploy db",
                "description" : "Execute the web1 Component process",
                "applicationTierName" : "Database",
                "processStepType" : "process",
                "subcomponent" : "db",
                "subcomponentProcess" : "deploy"
              },
              {
                "name" : "Manual Inspection",
                "instruction" : "Inspect the system",
                "notificationTemplate" : "ec_default_manual_retry_process_step_notification_template",
                "processStepType" : "manual",
                "assignee" : [ "marco", "seymour" ]
              },
              {
                "name" : "Rollback if failure",
                "processStepType" : "rollback",
                "rollbackType" : "environment",
                "smartRollback" : "1"
              },
              {
                "name": "Manual Inspection Succeeded",
                "applicationTierName": "User Interface",
                "processStepType": "command",
                "subprocedure": "RunCommand",
                "subproject": "/plugins/EC-Core/project",
                "commandToRun": "echo \"success!\""
              }
            ],
            "processDependencies" : [
              { "source" : "deploy web1",
                "target" : "deploy db",
                "branchCondition" : "!$[doManualCheck]",
                "branchConditionName" : "Don't do manual check",
                "branchConditionType" : "CUSTOM",
                "branchType" : "ALWAYS"
              },
              { "source" : "deploy web1",
                "target" : "Manual Inspection",
                "branchCondition" : "$[doManualCheck]",
                "branchConditionName" : "Do manual check",
                "branchConditionType" : "CUSTOM",
                "branchType" : "ALWAYS"
              },
              { "source" : "deploy web2",
                "target" : "deploy db",
                "branchType" : "ALWAYS"
              },
              { "source" : "Manual Inspection",
                "target" : "Rollback if failure",
                "branchType" : "ERROR"
              },
              { "source" : "Manual Inspection",
                "target" : "Manual Inspection Succeeded",
                "branchType" : "SUCCESS"
              },
              { "source" : "deploy web2",
                "target" : "deploy db",
                "branchType" : "ALWAYS"
              }




            ]
          }
        ],
        "tierMaps" : [
          { "applicationName" : "Two-Tier",
            "environmentName" : "dev",
            "tierMappings" : [
              {
                "applicationTierName" : "User Interface",
                "environmentTierName" : "AppTier"
              },
              {
                "applicationTierName" : "Database",
                "environmentTierName" : "DBTier"
              }
            ]
          },
          { "applicationName" : "Two-Tier",
            "environmentName" : "qa",
            "tierMappings" : [
              {
                "applicationTierName" : "User Interface",
                "environmentTierName" : "AppTier"
              },
              {
                "applicationTierName" : "Database",
                "environmentTierName" : "DBTier"
              }
            ]
          },
          { "applicationName" : "Two-Tier",
            "environmentName" : "prod",
            "tierMappings" : [
              {
                "applicationTierName" : "User Interface",
                "environmentTierName" : "AppTier"
              },
              {
                "applicationTierName" : "Database",
                "environmentTierName" : "DBTier"
              }
            ]
          }
        ]
      },
      {	"name" : "WeaveWorks Front End",
        "description" : "A Second Application",
        "services" : [
          {
            "name" : "WeaveWorks Front End",
            "description" : "Another Front End",
            "containers" : [
              {
                "name" : "WeaveWorks Front End Micro",
                "description" : "A Front End component",
                "command" : "null",
                "cpuCount" : "0.1",
                "cpuLimit" : "0.3",
                "credentialName" : "null",
                "entryPoint" : "null",
                "imageName" : "weaveworksdemos/front-end",
                "imageVersion" : "0.3.12",
                "memoryLimit" : "1024",
                "memorySize" : "100",
                "registryUri" : "null",
                "serviceName" : "File Transfer",
                "environmentVariables" : [
                  {
                    "name" : "SESSION_REDIS",
                    "type" : "string",
                    "value" : "true"
                  }
                ],
                "ports" : [
                  {
                    "name" : "uiport",
                    "microserviceName" : "WeaveWorks Front End",
                    "containerName" : "WeaveWorks Front End Micro",
                    "containerPort" : "8079",
                    "projectName" : "@@PROJECTNAMETOKEN@@",
                    "serviceName" : "WeaveWorks Front End"
                  }
                ]
              }
            ],
            "processes" : [
              {
                "name" : "Deploy Service",
                "description" : "An application-level process that deploys microservices",
                "processType" : "DEPLOY",
                "processSteps" : [
                  {
                    "name" : "deploy service",
                    "processStepType" : "service",
                    "description" : "Deploy the weaveworks services",
                    "applicationTierName" : "WeaveWorks Front End",
                    "subservice" : "WeaveWorks Front End",
                    "container" : "WeaveWorks Front End Micro"
                  },
                  {
                    "name" : "configure load balancer",
                    "processStepType" : "procedure",
                    "description" : "run a script to configure the load balancer",
                    "applicationTierName" : "WeaveWorks Front End",
                    "subprocedure" : "Stub",
                    "subproject" : "@@PROJECTNAMETOKEN@@"
                  }
                ],
                "processDependencies" : [
                  { "source" : "deploy service",
                    "target" : "configure load balancer",
                    "branchType" : "ALWAYS"
                  }
                ]
              }
            ],
            "tierMaps" : [
              {
                "serviceName" : "WeaveWorks Front End",
                "environmentName" : "cluster-dev",
                "clusterName" : "openshiftcluster",
                "serviceClusterMapping" : {
                  "actualParameters" : [
                    { "name" : "requestType", "text" : "create" },
                    { "name" : "serviceType", "text" : "NodePort" }
                  ],
                  "serviceMapDetail" : [
                    {"name" : "cpuCount", "text" : "1"},
                    {"name" : "cpuLimit", "text" : "2"}
                  ]
                }
              },
              {
                "serviceName" : "WeaveWorks Front End",
                "environmentName": "cluster-qa",
                "clusterName" : "openshiftcluster",
                "serviceClusterMapping" : {
                  "actualParameters" : [
                    { "name" : "requestType", "text" : "update" },
                    { "name" : "serviceType", "text" : "NodePort" }
                  ],
                  "serviceMapDetail" : [
                    {"name" : "cpuCount", "text" : "1"},
                    {"name" : "cpuLimit", "text" : "2"}
                  ]
                }
              },
              {
                "serviceName" : "WeaveWorks Front End",
                "environmentName": "cluster-prod",
                "clusterName" : "openshiftcluster",
                "serviceClusterMapping" : {
                  "actualParameters" : [
                    { "name" : "requestType", "text" : "update" },
                    { "name" : "serviceType", "text" : "NodePort" }
                  ],
                  "serviceMapDetail" : [
                    {"name" : "cpuCount", "text" : "2"},
                    {"name" : "cpuLimit", "text" : "3"},
                    {"name" : "memoryLimit", "text" : "3072"},
                    {"name" : "memorySize", "text" : "2048"}
                  ]
                }
              }
            ]
          }
        ]
      }
    ],

    "services" : [
      {
        "name" : "WeaveWorks FE Service",
        "description" : "Another Front End",
        "containers" : [
          {
            "name" : "WW FE Micro",
            "description" : "A Front End component",
            "command" : "null",
            "cpuCount" : "0.1",
            "cpuLimit" : "0.3",
            "credentialName" : "null",
            "entryPoint" : "null",
            "imageName" : "weaveworksdemos/front-end",
            "imageVersion" : "0.3.12",
            "memoryLimit" : "1024",
            "memorySize" : "100",
            "registryUri" : "null",
            "serviceName" : "File Transfer",
            "environmentVariables" : [
              {
                "name" : "SESSION_REDIS",
                "type" : "string",
                "value" : "true"
              }
            ],
            "ports" : [
              {
                "name" : "uiport",
                "containerPort" : "8079"
              }
            ]
          }
        ],
        "processes" : [
          {
            "name" : "Deploy Service",
            "description" : "An application-level process that deploys microservices",
            "processType" : "DEPLOY",
            "processSteps" : [
              {
                "name" : "deploy service",
                "processStepType" : "service",
                "description" : "Deploy the weaveworks services",
                "subservice" : "WeaveWorks FE Service",
                "container" : "WW FE Micro"
              },
              {
                "name" : "configure load balancer",
                "processStepType" : "procedure",
                "description" : "run a script to configure the load balancer",
                "subprocedure" : "Stub",
                "subproject" : "@@PROJECTNAMETOKEN@@"
              }
            ],
            "processDependencies" : [
              { "source" : "deploy service",
                "target" : "configure load balancer",
                "branchType" : "ALWAYS"
              }
            ]
          }
        ],
        "environmentMaps" : [
          {
            "serviceName" : "WeaveWorks FE Service",
            "environmentName" : "ww-cluster-dev",
            "clusterName" : "openshiftcluster",
            "serviceClusterMapping" : {
              "actualParameters" : [
                { "name" : "requestType", "text" : "create" },
                { "name" : "serviceType", "text" : "NodePort" }
              ],
              "serviceMapDetail" : [
                {"name" : "cpuCount", "text" : "1"},
                {"name" : "cpuLimit", "text" : "2"}
              ]
            }
          },
          {
            "serviceName" : "WeaveWorks FE Service",
            "environmentName": "ww-cluster-qa",
            "clusterName" : "openshiftcluster",
            "serviceClusterMapping" : {
              "actualParameters" : [
                { "name" : "requestType", "text" : "update" },
                { "name" : "serviceType", "text" : "NodePort" }
              ],
              "serviceMapDetail" : [
                {"name" : "cpuCount", "text" : "1"},
                {"name" : "cpuLimit", "text" : "2"}
              ]
            }
          },
          {
            "serviceName" : "WeaveWorks FE Service",
            "environmentName": "ww-cluster-prod",
            "clusterName" : "openshiftcluster",
            "serviceClusterMapping" : {
              "actualParameters" : [
                { "name" : "requestType", "text" : "update" },
                { "name" : "serviceType", "text" : "NodePort" }
              ],
              "serviceMapDetail" : [
                {"name" : "cpuCount", "text" : "2"},
                {"name" : "cpuLimit", "text" : "3"},
                {"name" : "memoryLimit", "text" : "3072"},
                {"name" : "memorySize", "text" : "2048"}
              ],
              "ports" : [
                {
                  "name" : "uiport",
                  "listenerPort" : "999",
                  "subcontainer" : "WW FE Micro",
                  "subport" : "uiport"
                }
              ]
            }
          }
        ]
      }
    ],

    "pipelines" : [
      {
        "name": "Multi-purpose Pipeline",
        "description" : "Example of a pipeline with multiple types of task types and other features",

        "formalParameters": [
          {
            "name" : "doSnapshot",
            "type" : "checkbox",
            "description" : "Enable if we should take a snapshot on each deployment",
            "defaultValue" : "true",
            "orderIndex" : "1",
            "label" : "Take snapshot?",
            "expansionDeferred" : "0",
            "checkedValue" : "true",
            "initiallyChecked" : "true",
            "uncheckedValue" : "false"
          },
          {
            "name" : "doService",
            "type" : "checkbox",
            "description" : "Enable if we should deploy the Service",
            "defaultValue" : "true",
            "orderIndex" : "1",
            "label" : "Deploy Service?",
            "expansionDeferred" : "0",
            "checkedValue" : "true",
            "initiallyChecked" : "true",
            "uncheckedValue" : "false"
          },
          {
            "name" : "enableGates",
            "type" : "checkbox",
            "description" : "Enable if we should enable gates in this run",
            "defaultValue" : "true",
            "orderIndex" : "1",
            "label" : "Enable Gates?",
            "expansionDeferred" : "0",
            "checkedValue" : "true",
            "initiallyChecked" : "true",
            "uncheckedValue" : "false"
          }
        ],

        "stages": [
          {
            "name": "DEV",
            "description" : "This stage contains entry points to illustrate different types of tasks",
            "gates" : [
              {
                "gateType" : "POST",
                "task" :
                {
                  "name" : "Gate out of First Stage",
                  "description" : "Show an approval gate out of a stage",
                  "taskType" : "APPROVAL",
                  "approver" : "marco",
                  "condition" : "$[enableGates]"
                }
              }
            ],
            "tasks": [
              {
                "name": "Deploy Group",
                "description" : "Group the software into one",
                "taskType" : "GROUP",
                "projectName" : "@@PROJECTNAMETOKEN@@",
                "subproject" : "@@PROJECTNAMETOKEN@@"
              },
              {
                "name": "Deploy-Application",
                "description" : "Deploy an Application",
                "taskType" : "PROCESS",
                "groupName" : "Deploy Group",
                "environmentName" : "dev",
                "environmentProjectName": "@@PROJECTNAMETOKEN@@",
                "subapplication" : "Two-Tier",
                "subprocess" : "Deploy Application",
                "subproject" : "@@PROJECTNAMETOKEN@@",
                "actualParameters" : [
                  { "name": "ec_enforceDependencies", "value" : "0" },
                  { "name": "ec_smartDeployOption", "value" : "0" },
                  { "name": "ec_stageArtifacts", "value" : "0" }
                ]
              },
              {
                "name": "Deploy-Service",
                "description" : "Deploy a Service",
                "taskType" : "PROCESS",
                "taskProcessType" : "APPLICATION",
                "groupName" : "Deploy Group",
                "condition" : "$[doService]",
                "environmentName" : "cluster-dev",
                "environmentProjectName" : "@@PROJECTNAMETOKEN@@",
                "subapplication" : "WeaveWorks Front End",
                "subprocess" : "Deploy Service",
                "subproject" : "@@PROJECTNAMETOKEN@@",
                "actualParameters" : [
                  { "name": "ec_enforceDependencies", "value" : "0" }
                ]
              },
              {
                "name": "Procedure",
                "description" : "Run a procedure",
                "taskType" : "PROCEDURE",
                "subprocedure" : "Stub",
                "subproject" : "@@PROJECTNAMETOKEN@@"
              },
              {
                "name": "Command line",
                "description" : "Run a command-line expression",
                "taskType" : "COMMAND",
                "commandToRun" : "echo \"Hello world\""
              },
              {
                "name": "Workflow",
                "description" : "Run workflow we have developed",
                "taskType" : "WORKFLOW",
                "subproject" : "@@PROJECTNAMETOKEN@@",
                "subworkflowDefinition" : "Prototypical Workflow",
                "subworkflowStartingState" : "Starting State"
              },
              {
                "name": "Plugin",
                "description": "Run a plugin",
                "taskType": "PLUGIN",
                "subpluginKey": "EC-FileOps",
                "subprocedure": "CreateEmptyFile",
                "actualParameters": [
                  { "name": "Name", "value": "foo.txt" }
                ],
                "condition" : "$[doSnapshot]"
              },
              {
                "name": "Manual Task",
                "description" : "Manual intervention",
                "taskType" : "MANUAL",
                "instruction" : "Approve to continue the pipeline",
                "notificationTemplate" : "ec_default_pipeline_manual_task_notification_template",
                "approver" : [ "admin", "marco" ]
              },
              {
                "name": "Utility - Create Snapshot",
                "description" : "Run a utility function",
                "condition" : "$[doSnapshot]",
                "taskType" : "UTILITY",
                "subpluginKey" : "EF-Utilities",
                "subprocedure" : "Create Snapshot",
                "actualParameters" : [
                  {"name" : "ApplicationName", "value" : "$[/myApplication/applicationName]"},
                  {"name" : "EnvironmentName", "value" : "$[/myEnvironment/environmentName]"},
                  {"name" : "EnvironmentProjectName", "value" : "$[/myEnvironment/@@PROJECTNAMETOKEN@@]"},
                  {"name" : "Overwrite", "value" : "false"},
                  {"name" : "ProjectName", "value" : "$[/myApplication/@@PROJECTNAMETOKEN@@]"},
                  {"name" : "ServiceName", "value" : "$[/myService/serviceName]"},
                  {"name" : "SnapshotName", "value" : "mysnap-1.0"}
                ]
              }
            ]
          },
          {
            "name": "STAGE",
            "description" : "This stage contains variations of task conditions, groups, and more",
            "gates" : [
              {
                "gateType" : "PRE",
                "task" :
                {
                  "name" : "Gate into the Second Stage",
                  "description" : "Show an approval gate into a stage",
                  "taskType" : "APPROVAL",
                  "approver" : "seymour"
                }
              }
            ],
            "tasks": [
              {
                "name": "Deploy Group",
                "description" : "Group the software into one",
                "taskType" : "GROUP",
                "projectName" : "@@PROJECTNAMETOKEN@@",
                "subproject" : "@@PROJECTNAMETOKEN@@"
              },
              {
                "name": "Deploy-Application",
                "description" : "Deploy an Application",
                "taskType" : "PROCESS",
                "groupName" : "Deploy Group",
                "environmentName" : "qa",
                "environmentProjectName": "@@PROJECTNAMETOKEN@@",
                "subapplication" : "Two-Tier",
                "subprocess" : "Deploy Application",
                "subproject" : "@@PROJECTNAMETOKEN@@"
              },
              {
                "name": "Deploy-Service",
                "description" : "Deploy a Service",
                "taskType" : "PROCESS",
                "taskProcessType" : "APPLICATION",
                "groupName" : "Deploy Group",
                "condition" : "$[doService]",
                "environmentName" : "cluster-qa",
                "environmentProjectName" : "@@PROJECTNAMETOKEN@@",
                "subapplication" : "WeaveWorks Front End",
                "subprocess" : "Deploy Service",
                "subproject" : "@@PROJECTNAMETOKEN@@",
                "actualParameters" : [
                  { "name": "ec_enforceDependencies", "value" : "0" }
                ]
              },
              {
                "name": "Test",
                "description" : "Test the deployed software",
                "taskType" : "PROCEDURE",
                "subprocedure" : "Stub",
                "subproject" : "@@PROJECTNAMETOKEN@@"
              }
            ]
          },
          {
            "name": "PROD",
            "description" : "This stage contains variations of task conditions, groups, and more",
            "gates" : [
              {
                "gateType" : "PRE",
                "task" :
                {
                  "name" : "Gate into the PROD Stage",
                  "description" : "Show an approval gate into a stage",
                  "taskType" : "APPROVAL",
                  "approver" : "seymour"
                }
              }
            ],
            "tasks": [
              {
                "name": "Deploy Group",
                "description" : "Group the software into one",
                "taskType" : "GROUP",
                "projectName" : "@@PROJECTNAMETOKEN@@",
                "subproject" : "@@PROJECTNAMETOKEN@@"
              },
              {
                "name": "Deploy-Application",
                "description" : "Deploy an Application",
                "taskType" : "PROCESS",
                "groupName" : "Deploy Group",
                "environmentName" : "prod",
                "environmentProjectName": "@@PROJECTNAMETOKEN@@",
                "subapplication" : "Two-Tier",
                "subprocess" : "Deploy Application",
                "subproject" : "@@PROJECTNAMETOKEN@@"
              },
              {
                "name": "Deploy-Service",
                "description" : "Deploy a Service",
                "taskType" : "PROCESS",
                "taskProcessType" : "APPLICATION",
                "groupName" : "Deploy Group",
                "condition" : "$[doService]",
                "environmentName" : "cluster-prod",
                "environmentProjectName" : "@@PROJECTNAMETOKEN@@",
                "subapplication" : "WeaveWorks Front End",
                "subprocess" : "Deploy Service",
                "subproject" : "@@PROJECTNAMETOKEN@@",
                "actualParameters" : [
                  { "name": "ec_enforceDependencies", "value" : "0" }
                ]
              },
              {
                "name": "Test",
                "description" : "Test the deployed software",
                "taskType" : "PROCEDURE",
                "subprocedure" : "Stub",
                "subproject" : "@@PROJECTNAMETOKEN@@"
              }
            ]
          }
        ]
      }
    ]

  },

  "resources" : [
    "@@PROJECTNAMETOKEN@@-dev",
    "@@PROJECTNAMETOKEN@@-qa",
    "@@PROJECTNAMETOKEN@@-prod"
  ]

}
